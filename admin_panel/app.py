import os
import socket
from typing import Dict, Any

import httpx
import pandas as pd
import streamlit as st
from sqlalchemy import create_engine, text
from sqlalchemy.exc import ProgrammingError
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# --- –§—É–Ω–∫—Ü–∏–∏ ---
def resolve_app_base_url() -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–π URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —Å —Ñ–æ–ª–ª–±–µ–∫–æ–º."""
    url = os.getenv("ADMIN_APP_URL", "").strip()
    # –µ—Å–ª–∏ —è–≤–Ω–æ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if url:
        return url

    # –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ–∑–æ–ª–≤–∞ docker-—Å–µ—Ä–≤–∏—Å–∞ "app"
    try:
        socket.gethostbyname("app")
        # app —Å–ª—É—à–∞–µ—Ç –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–æ—Ä—Ç 80
        return "http://app"
    except Exception:
        pass

    # –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ–ª–ª–±–µ–∫ (–∫–æ–≥–¥–∞ admin –∑–∞–ø—É—Å–∫–∞—é—Ç –≤–Ω–µ Docker)
    return "http://localhost:8000"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
APP_BASE = resolve_app_base_url()
DB_URL = os.getenv("ADMIN_DB_URL")
POLL_SECONDS = int(os.getenv("ADMIN_POLL_SECONDS", "5"))
PAGE_SIZE = int(os.getenv("ADMIN_PAGE_SIZE", "500"))

# Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not DB_URL:
    DB_USER = os.getenv("POSTGRES_USER")
    DB_PASSWORD = os.getenv("POSTGRES_PASSWORD")
    DB_SERVER = "db"  # –í–Ω—É—Ç—Ä–∏ Docker —Å–µ—Ç–∏
    DB_PORT = os.getenv("POSTGRES_PORT", "5432")
    DB_NAME = os.getenv("POSTGRES_DB")
    DB_URL = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_SERVER}:{DB_PORT}/{DB_NAME}"

engine = create_engine(DB_URL)


# --- –§—É–Ω–∫—Ü–∏–∏ ---
def trigger_replenishment(warehouse_id: str = ""):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ü–µ–Ω–∫–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–∞."""
    try:
        url = APP_BASE.rstrip("/") + "/api/v1/trigger/internal-replenishment"
        headers = {"Content-Type": "application/json"}
        payload = {"warehouse_id": warehouse_id.strip()} if warehouse_id.strip() else None

        with httpx.Client() as client:
            response = client.post(url, headers=headers, json=payload, timeout=30)
            response.raise_for_status()
            st.success(f"–ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.text:
                try:
                    result = response.json()
                    st.json(result)
                except:
                    st.text(response.text)
    except httpx.HTTPStatusError as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e.response.status_code} - {e.response.text}")
    except Exception as e:
        st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


def create_logs_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É integration_logs —á–µ—Ä–µ–∑ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        url = APP_BASE.rstrip("/") + "/admin/init_logs_table"
        headers = {"Content-Type": "application/json"}

        with httpx.Client() as client:
            response = client.post(url, headers=headers, timeout=30)
            response.raise_for_status()
            st.success("–¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            st.rerun()
    except httpx.HTTPStatusError as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e.response.status_code} - {e.response.text}")
    except Exception as e:
        st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")


def fetch_logs_safe(params: dict):
    """
    –û–±—ë—Ä—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:
    - –Ω–∞ —É—Å–ø–µ—Ö–µ: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç pd.DataFrame
    - –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç: —Å—Ç—Ä–æ–∫—É-—Å–µ–Ω—Ç–∏–Ω–µ–ª 'TABLE_NOT_EXISTS'
    - –Ω–∞ –∏–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö: —Å—Ç—Ä–æ–∫–∞ 'ERROR: ...'
    """
    try:
        minutes = params.get("mins", 60)
        level = params.get("level", "–í—Å–µ")
        system = params.get("system", "–í—Å–µ")
        status = params.get("status", "–í—Å–µ")
        step_like = params.get("step_like", "")
        run_id = params.get("run_id", "")
        limit = params.get("limit", PAGE_SIZE)

        where = []
        sql_params: Dict[str, Any] = {"limit": limit, "mins": minutes}

        # –æ–∫–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (PostgreSQL-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ)
        where.append("(COALESCE(ts, created_at) >= (NOW() AT TIME ZONE 'UTC') - make_interval(mins => :mins))")

        if level and level != "–í—Å–µ":
            where.append("(COALESCE(log_level, details->>'level') = :level)")
            sql_params["level"] = level

        if system and system != "–í—Å–µ":
            where.append("(COALESCE(external_system, 'INTERNAL') = :system)")
            sql_params["system"] = system

        if status and status != "–í—Å–µ":
            where.append("(COALESCE(status, 'INFO') = :status)")
            sql_params["status"] = status

        if step_like:
            where.append("(COALESCE(step, '') ILIKE :step)")
            sql_params["step"] = f"%{step_like}%"

        if run_id:
            where.append("(COALESCE(run_id, '') = :run_id)")
            sql_params["run_id"] = run_id

        where_sql = " AND ".join(where) if where else "TRUE"
        sql = text(
            f"""
            SELECT
              COALESCE(ts, created_at) AS created_at,
              COALESCE(process_name, step) AS process_name,
              COALESCE(log_level, status) AS log_level,
              COALESCE(message, details->>'message') AS message,
              run_id, request_id, job_id, step, status, external_system,
              elapsed_ms, retry_count, payload_hash, details, payload
            FROM integration_logs
            WHERE {where_sql}
            ORDER BY COALESCE(ts, created_at) DESC
            LIMIT :limit
            """
        )

        df = pd.read_sql(sql, engine, params=sql_params)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ
        if not df.empty and "created_at" in df.columns:
            try:
                df["created_at"] = pd.to_datetime(df["created_at"]).dt.tz_localize(
                    "UTC"
                ).dt.tz_convert("Europe/Moscow")
            except Exception:
                pass
        return df
    except ProgrammingError as e:
        if "relation \"integration_logs\" does not exist" in str(e) or "UndefinedTable" in str(e):
            return "TABLE_NOT_EXISTS"
        return f"ERROR: {e}"
    except Exception as e:
        return f"ERROR: {e}"


@st.cache_data(ttl=POLL_SECONDS)
def load_logs(minutes: int = 60, level: str = "–í—Å–µ", system: str = "–í—Å–µ",
              status: str = "–í—Å–µ", step_like: str = "", run_id: str = "", limit: int = None):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏."""
    if limit is None:
        limit = PAGE_SIZE

    query_params = {
        "mins": minutes,
        "level": level,
        "system": system,
        "status": status,
        "step_like": step_like,
        "run_id": run_id,
        "limit": limit
    }

    return fetch_logs_safe(query_params)


# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.set_page_config(page_title="–ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - Integration Hub", layout="wide")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö
st.title("üîß –ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
st.caption(f"DB: {DB_URL.split('@')[1] if '@' in DB_URL else 'N/A'} | App: {APP_BASE}")

# --- –°–µ–∫—Ü–∏—è –†—É—á–Ω–æ–≥–æ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
st.header("–†—É—á–Ω–æ–µ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
col1, col2 = st.columns(2)

with col1:
    warehouse_id = st.text_input("–°–∫–ª–∞–¥ ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –Æ—Ä–ª–æ–≤—Å–∫–∏–π")
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ü–µ–Ω–∫—É –¥–µ—Ñ–∏—Ü–∏—Ç–∞", use_container_width=True):
        trigger_replenishment(warehouse_id)

with col2:
    st.button("üì¶ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –∑–∞–∫–∞–∑ (–ú–æ–π–°–∫–ª–∞–¥)", disabled=True, use_container_width=True)
    st.caption("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

st.divider()

# --- –°–µ–∫—Ü–∏—è –ñ—É—Ä–Ω–∞–ª–∞ –û–ø–µ—Ä–∞—Ü–∏–π ---
st.header("üìä –ñ—É—Ä–Ω–∞–ª –û–ø–µ—Ä–∞—Ü–∏–π")

# –§–∏–ª—å—Ç—Ä—ã
col1, col2, col3, col4 = st.columns(4)

with col1:
    minutes = st.number_input("–ü–µ—Ä–∏–æ–¥ (–º–∏–Ω—É—Ç):", min_value=1, max_value=1440, value=60)

with col2:
    level_filter = st.selectbox("–£—Ä–æ–≤–µ–Ω—å:", ["–í—Å–µ", "DEBUG", "INFO", "WARN", "ERROR"])

with col3:
    system_filter = st.selectbox("–°–∏—Å—Ç–µ–º–∞:", ["–í—Å–µ", "INTERNAL", "1C", "MOYSKLAD"])

with col4:
    status_filter = st.selectbox("–°—Ç–∞—Ç—É—Å:", ["–í—Å–µ", "INFO", "SUCCESS", "ERROR", "STARTED", "COMPLETED"])

col5, col6 = st.columns(2)
with col5:
    step_filter = st.text_input("–ü–æ–∏—Å–∫ –ø–æ —à–∞–≥—É:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: replenishment")

with col6:
    run_id_filter = st.text_input("Run ID:", placeholder="–§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É")

if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏"):
    st.cache_data.clear()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
logs_result = load_logs(
    minutes=minutes,
    level=level_filter,
    system=system_filter,
    status=status_filter,
    step_like=step_filter,
    run_id=run_id_filter
)

if isinstance(logs_result, str):
    # —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã/–æ—à–∏–±–∫–∏
    if logs_result == "TABLE_NOT_EXISTS":
        st.warning("–¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ `integration_logs` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—Ç—å?")
        if st.button("üîß –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤ —Å–µ–π—á–∞—Å", use_container_width=True):
            create_logs_table()
    elif logs_result.startswith("ERROR:"):
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {logs_result[6:]}")
    else:
        st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {logs_result}")

elif isinstance(logs_result, pd.DataFrame):
    # –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä
    if logs_result.empty:
        st.info("–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
    else:
        st.dataframe(logs_result, use_container_width=True)
        st.caption(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(logs_result)} –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {minutes} –º–∏–Ω—É—Ç")
else:
    # –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–≤–µ—Å—Ç–∏ –∏–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫ DataFrame, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å
    try:
        df = pd.DataFrame(logs_result)
        if df.empty:
            st.info("–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
        else:
            st.dataframe(df, use_container_width=True)
            st.caption(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {minutes} –º–∏–Ω—É—Ç")
    except Exception as e:
        st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–∞: {type(logs_result)} ‚Äî {e}")

