import os

import httpx
import pandas as pd
import streamlit as st
from sqlalchemy import create_engine
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
API_BASE_URL = "http://app:80"  # –í–Ω—É—Ç—Ä–∏ Docker —Å–µ—Ç–∏ –æ–±—Ä–∞—â–∞–µ–º—Å—è –ø–æ –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–∏—Å–∞
DB_USER = os.getenv("POSTGRES_USER")
DB_PASSWORD = os.getenv("POSTGRES_PASSWORD")
DB_SERVER = "db"  # –í–Ω—É—Ç—Ä–∏ Docker —Å–µ—Ç–∏
DB_PORT = os.getenv("POSTGRES_PORT")
DB_NAME = os.getenv("POSTGRES_DB")

DATABASE_URL = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_SERVER}:{DB_PORT}/{DB_NAME}"
engine = create_engine(DATABASE_URL)


# --- –§—É–Ω–∫—Ü–∏–∏ ---
def trigger_process(endpoint: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞."""
    try:
        with httpx.Client() as client:
            response = client.post(f"{API_BASE_URL}{endpoint}")
            response.raise_for_status()
            st.success(
                f"–ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.json().get('message')}"
            )
    except httpx.HTTPStatusError as e:
        st.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e.response.status_code} - {e.response.text}"
        )
    except Exception as e:
        st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


@st.cache_data(ttl=60)  # –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
def load_logs():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        query = (
            "SELECT created_at, process_name, log_level, message, payload "
            "FROM integration_logs ORDER BY created_at DESC LIMIT 500"
        )
        df = pd.read_sql(query, engine)
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ
        try:
            df["created_at"] = pd.to_datetime(df["created_at"]).dt.tz_localize(
                "UTC"
            ).dt.tz_convert("Europe/Moscow")
        except Exception:
            pass
        return df
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()


# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.set_page_config(page_title="–ü–∞–Ω–µ–ª—å –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π", layout="wide")

st.title("–ü–∞–Ω–µ–ª—å –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")

# --- –°–µ–∫—Ü–∏—è –†—É—á–Ω–æ–≥–æ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
st.header("–†—É—á–Ω–æ–µ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
col1, col2 = st.columns(2)

with col1:
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ (1–°)", use_container_width=True):
        trigger_process("/api/v1/trigger/internal-replenishment")

with col2:
    st.button(
        "üì¶ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –∑–∞–∫–∞–∑ (–ú–æ–π–°–∫–ª–∞–¥)", disabled=True, use_container_width=True
    )
    st.caption("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

st.divider()

# --- –°–µ–∫—Ü–∏—è –ñ—É—Ä–Ω–∞–ª–∞ –û–ø–µ—Ä–∞—Ü–∏–π ---
st.header("–ñ—É—Ä–Ω–∞–ª –û–ø–µ—Ä–∞—Ü–∏–π")

if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏"):
    st.cache_data.clear()

logs_df = load_logs()

if not logs_df.empty:
    # –§–∏–ª—å—Ç—Ä—ã
    log_levels = logs_df["log_level"].unique()
    selected_level = st.selectbox(
        "–§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é:", options=["–í—Å–µ"] + list(log_levels)
    )

    if selected_level != "–í—Å–µ":
        filtered_df = logs_df[logs_df["log_level"] == selected_level]
    else:
        filtered_df = logs_df

    st.dataframe(filtered_df, use_container_width=True)
else:
    st.warning("–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Ö –∑–∞–≥—Ä—É–∑–∏—Ç—å.")

